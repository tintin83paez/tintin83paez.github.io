@page "/receipts/detailreceipt"
@using AppForDevices.Web.API
@inject AppForDevicesAPIClient apiservice
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
<h3>Receipt</h3>
@if (receipt == null)
{
    <p>@error</p>
}
else
{
    <table class="table table-borderless table-sm">
        <tr>
            <th>Name and Surname</th>
            <td id="NameSurname">@receipt.CustomerNameSurname</td>
        </tr>
        <tr>
            <th>Delivery Address</th>
            <td id="DeliveryAddress">@receipt.DeliveryAddress</td>
        </tr>
        <tr>
            <th>Payment Method</th>
            <td id="PaymentMethod">@receipt.PaymentMethod</td>
        </tr>
        <tr>
            <th>Receipt Date</th>
            <td id="ReceiptDate">@receipt.ReceiptDate.ToString("dd/MM/yyyy hh:mm:ss")</td>
        </tr>

    </table>
    <h4>Selected Repairs</h4>

    <table class="table" id="SelectedRepairs">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Scale</th>
                <th scope="col">Description</th>
                <th scope="col">Cost</th>
                <th scope="col">Model</th>
            </tr>
        </thead>
        <tbody>
            @foreach (ReceiptItemDTO item in receipt.ReceiptItems)
            {
                <tr id="ReceiptItem_@item.RepairId">
                    <td>@item.Name</td>
                    <td>@item.Scale</td>
                    <td>@item.Description</td>
                    <td>@item.Cost €</td>
                    <td>@item.Model</td>
                </tr>
            }
        </tbody>
        <tfoot>
            @*colspan is used to state that TWO columns are collapsed*@
        <th scope="row" colspan="2" class="text-end">Total Price</th>
        <td id="TotalPrice">@receipt.TotalPrice €</td>
        </tfoot>

    </table>

}
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int ReceiptID { get; set; }
    private ReceiptDetailDTO receipt;
    private string error = "";

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {

        //we check the user is logged in
        string userName = "";
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                if (user.Identity is not null && user.Identity.IsAuthenticated && user.IsInRole("User"))
                {
                    userName = user.Identity.Name;
                }
            }
        }

        try
        {
            receipt = await apiservice.GetReceiptAsync(ReceiptID);
        }
        catch (ApiException exception)
        //   if ((rental == null) || (rental.CustomerUserName != userName))
        {
            error = $"Error! You are not authorized to see this receipt or there is not a receipt with id={ReceiptID}";
        }


    }
}
