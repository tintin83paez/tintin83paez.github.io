@page "/purchases/createpurchase"
@using AppForDevices.Web.API
@using AppForDevices.Web.Components.Shared
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject AppForDevicesAPIClient apiclient
@inject ILogger<CreatePurchase> logger
@inject PurchaseStateContainer purchasestatecontainer
@inject NavigationManager navigationManager

@attribute [Authorize]
@attribute [StreamRendering]

<h1>Create Purchase</h1>
<EditForm Model="purchase" OnValidSubmit="OpenDialog">
    @* Display validation errors *@
    <DataAnnotationsValidator />
    <ValidationSummary />
    <ul class="validation-errors" hidden=@hideErrors>
        @foreach (string error in errors)
        {
            <li class="validation-message">@error</li>
        }
    </ul>

    @* Form inputs in a single column *@
    <div class="card mb-3">
        <div class="card-header d-flex align-items-center">
            <i class="bi bi-cart-fill me-2"></i>
            <strong>Purchase Information</strong>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label for="name_surname" class="form-label fw-bold">Name and Surname:</label>
                <div class="input-group">
                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-person-fill"></i></span>
                    <InputText class="form-control" @bind-Value="purchase.NameSurname" id="name_surname" placeholder="Name and Surname" aria-label="Name and Surname" aria-describedby="basic-addon1" />
                </div>
            </div><div class="mb-3">
                <label for="username" class="form-label fw-bold">User Name:</label>
                <div class="input-group">
                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-person-fill"></i></span>
                    <InputText class="form-control" @bind-Value="purchase.UserName" id="user_name" placeholder="User Name" aria-label="User Name" aria-describedby="basic-addon1" />
                </div>
            </div>
            <div class="mb-3">
                <label for="delivery_address" class="form-label fw-bold">Delivery Address:</label>
                <div class="input-group">
                    <span class="input-group-text" id="basic-addon2"><i class="bi bi-geo-alt-fill"></i></span>
                    <InputText class="form-control" @bind-Value="purchase.DeliveryAddress" id="delivery_address" placeholder="Delivery Address" aria-label="Delivery Address" aria-describedby="basic-addon2" />
                </div>
            </div>
            <div class="mb-3">
                <label for="payment" class="form-label fw-bold">Type of Payment Method:</label>
                <div class="input-group">
                    <span class="input-group-text" id="basic-addon3"><i class="bi bi-credit-card-fill"></i></span>
                    <InputSelect id="payment" @bind-Value="purchase.PaymentMethod" class="form-select" aria-label="Payment Method" aria-describedby="basic-addon3">
                        <option value="@PaymentMethodTypes.CreditCard" default>Credit Card</option>
                        <option value="@PaymentMethodTypes.PayPal">PayPal</option>
                        <option value="@PaymentMethodTypes.Cash">Cash</option>
                    </InputSelect>
                </div>
            </div>
            <div class="mb-3">
                <label for="total_price" class="form-label fw-bold">Total Price:</label>
                <div class="input-group">
                    <span class="input-group-text" id="basic-addon4"><i class="bi bi-currency-euro"></i></span>
                    <label class="form-control" id="total_price">@Totalprice €</label>
                </div>
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-primary" type="submit" id="Submit">
                    <i class="bi bi-bag-check-fill me-1"></i>Purchase Devices
                </button>
                <button class="btn btn-outline-primary" type="button" id="modifyPurchaseItems" @onclick="ModifyPurchaseItems">
                    <i class="bi bi-pencil-fill me-1"></i>Modify your shopping cart
                </button>
            </div>
        </div>
    </div>


    @* Table for movie purchase details *@
    <div class="card">
        <div class="card-header d-flex align-items-center">
            <i class="bi bi-cart-fill me-2"></i>
            <strong>Purchase Items</strong>
            @if (purchase.PurchaseItems != null && purchase.PurchaseItems.Count > 0)
            {
                <span class="badge bg-info text-dark ms-3">@purchase.PurchaseItems.Count items</span>
            }
        </div>
        <div class="card-body p-0">
            @if (purchase.PurchaseItems == null || !purchase.PurchaseItems.Any())
            {
                <div class="p-3">
                    <p class="text-muted mb-0">
                        <i class="bi bi-exclamation-circle me-2"></i>No items found in the purchase.
                    </p>
                </div>
            }
            else
            {
                <table class="table table-striped table-hover mb-0" id="TableOfPurchaseItems">
                    <thead class="table-light">
                        <tr>
                            <th scope="col"><i class="bi bi-device-mobile me-1"></i>Name</th>
                            <th scope="col"><i class="bi bi-laptop me-1"></i>Model</th>
                            <th scope="col"><i class="bi bi-bootstrap me-1"></i>Brand</th>
                            <th scope="col"><i class="bi bi-palette me-1"></i>Color</th>  
                            <th scope="col"><i class="bi bi-currency-dollar me-1"></i>Price</th>
                            <th scope="col"><i class="bi bi-plus-square me-1"></i>Quantity</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in purchase.PurchaseItems)
                        {
                            <tr id="device_@item.DeviceId">
                                <td>@item.Name</td>
                                <td>@item.Model</td>
                                <td>@item.Brand</td> 
                                <td>@item.Color</td> 
                                <td>@item.PriceForPurchase</td>
                                <td>
                                    <InputNumber @bind-Value="item.Quantity" class="form-control form-control-sm" id="@($"quantity_{item.Name}")" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>

</EditForm>

@if (DialogIsOpen)
{
    <Dialog Caption="Purchase movies"
            Message="Do you want to proceed to purchase the selected movies?"
            OnClose="@OnDialogClose"
            Type=Dialog.Category.SaveNot>
    </Dialog>
}

@code {
    private PurchaseForCreateDTO purchase => purchasestatecontainer.Purchase;
    private double Totalprice => purchase.PurchaseItems.Sum(pi => pi.Quantity * pi.PriceForPurchase);
    private bool DialogIsOpen = false;
    private List<string> errors = new List<string>();
    private bool hideErrors => errors.Count == 0;

    private void ModifyPurchaseItems()
    {
        navigationManager.NavigateTo("/purchases/selectdevicesforpurchases");
    }

    private void OpenDialog()
    {
        DialogIsOpen = true;
    }

    private async Task OnDialogClose(bool isOk)
    {
        DialogIsOpen = false;
        if (isOk)
        {
            errors.Clear();
            try
            {
                var purchased = await apiclient.CreatePurchaseAsync(purchase);
                purchasestatecontainer.Reset();
                navigationManager.NavigateTo($"/purchases/detailpurchase/?PurchaseId={purchased.Id}");
            }
            catch (ApiException<ValidationProblemDetails> apiexceptionvalidation)
            {
                if (apiexceptionvalidation.Result.Errors.Values != null)
                {
                    foreach (var validationErrors in apiexceptionvalidation.Result.Errors.Values)
                    {
                        errors.AddRange(validationErrors);
                    }
                }
            }
            catch (ApiException)
            {
                errors.Add("Error while processing your request, please try again later!");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity?.IsAuthenticated == true)
            {
                purchase.UserName = user.Identity.Name;
            }
        }

        purchase.TotalPrice = purchase.PurchaseItems.Sum(pi => pi.Quantity * pi.PriceForPurchase);
    }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
}
