@page "/purchases/selectdevicesforpurchases"
@using AppForDevices.Web.API
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject AppForDevicesAPIClient apiclient
@inject ILogger<SelectdevicesForPurchase> logger
@inject PurchaseStateContainer purchasestatecontainer
@inject NavigationManager navigationManager
@attribute [Authorize]
@attribute [StreamRendering]

<h1 class="mb-3">Select Devices For Purchase</h1>
<p class="text-secondary mb-4">Choose the elements to be introduced in your cart.</p>

<div class="container-fluid">

    <!-- Mensaje de error, si aplica -->
    @if (!HideErrorMessage)
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger" role="alert" hidden="@HideErrorMessage">
                    <i class="bi bi-exclamation-circle-fill me-2"></i>
                    <p id="ErrorsShown">Errors: @error</p>

                </div>
            </div>
        </div>
    }

    <div class="row">
        <!-- Columna principal: Filtros y lista de dispositivos -->
        <div class="col-8">

            <!-- Tarjeta para mostrar el conteo de dispositivos seleccionados -->
            <div class="card mb-3">
                <div class="card-header d-flex align-items-center">
                    <i class="bi bi-check-circle me-2"></i>
                    <strong>Selected Devices</strong>
                    <span class="badge bg-primary ms-auto">@purchasestatecontainer.Purchase.PurchaseItems.Count</span>
                </div>
            </div>

            <!-- Tarjeta para filtrar dispositivos -->
            <div class="card mb-3">
                <div class="card-header d-flex align-items-center">
                    <i class="bi bi-funnel me-2"></i>
                    <strong>Filter Devices</strong>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="filterbyName" class="form-label fw-bold">Name</label>
                        <div class="input-group">
                            <span class="input-group-text" id="basic-addon1"><i class="bi bi-tag-fill"></i></span>
                            <InputText class="form-control" @bind-Value="@deviceName" id="filterbyName" placeholder="Name" aria-label="Name" aria-describedby="basic-addon1" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="filterbyColor" class="form-label fw-bold">Color</label>
                        <div class="input-group">
                            <span class="input-group-text" id="basic-addon1"><i class="bi bi-palette-fill"></i></span>
                            <InputText class="form-control" @bind-Value="@deviceColor" id="filterbyColor" placeholder="Color" aria-label="Color" aria-describedby="basic-addon1" />
                        </div>
                    </div>
                    <button id="buttonSearch" type="button" class="btn btn-primary" @onclick=@SearchDevices>
                        <i class="bi bi-search me-1"></i>Search Devices
                    </button>
                </div>
            </div>

            <!-- Tarjeta para la lista de dispositivos disponibles -->
            <div class="card">
                <div class="card-header d-flex align-items-center">
                    <i class="bi bi-hdd-network me-2"></i>
                    <strong>Devices Available</strong>
                    @if (devices != null && devices.Count > 0)
                    {
                        <span class="badge bg-info text-dark ms-3">@devices.Count found</span>
                    }
                </div>
                <div class="card-body p-0">
                    @if (devices == null)
                    {
                        <div class="p-3">
                            <p class="text-muted mb-0">
                                <i class="bi bi-hourglass-split me-2"></i>Loading devices...
                            </p>
                        </div>
                    }
                    else
                    {
                        <table class="table table-striped table-hover mb-0" id="devicesAvailable">
                            <thead class="table-light">
                                <tr>
                                    <th scope="col"><i class="bi bi-device-mobile me-1"></i>Name</th>
                                    <th scope="col"><i class="bi bi-laptop me-1"></i>Model</th>
                                    <th scope="col"><i class="bi bi-bootstrap me-1"></i>Brand</th>
                                    <th scope="col"><i class="bi bi-palette me-1"></i>Color</th>
                                    <th scope="col"><i class="bi bi-currency-dollar me-1"></i>Price</th>
                                    <th scope="col"><i class="bi bi-plus-square me-1"></i>Select</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (DeviceForPurchaseDTO device in devices)
                                {
                                    <tr id="device_@device.Name">
                                        <td>@device.Name</td>
                                        <td>@device.Model</td>
                                        <td>@device.Brand</td>
                                        <td>@device.Color</td>
                                        <td>@device.PriceForPurchase</td>
                                        <td>
                                            <button id="adddevice_@device.Name" @onclick="@(()=>AddDevice(device))" type="button" class="btn btn-outline-primary btn-sm">
                                                <i class="bi bi-cart-plus me-1"></i>Add Device
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>

        <!-- Columna lateral: Carrito de compras -->
        <div class="col-4" hidden="@hideShoppingCart">
            <div class="card">
                <div class="card-header d-flex align-items-center">
                    <i class="bi bi-cart4 me-2"></i>
                    <strong>Shopping Cart</strong>
                </div>
                <div class="card-body">
                    @foreach (PurchaseItemDTO item in purchasestatecontainer.Purchase.PurchaseItems)
                    {
                        <div class="d-flex align-items-center mb-2 p-2 border-bottom">
                            <span class="flex-grow-1">
                                <i class="bi bi-phone-fill me-1"></i>@item.Name - @item.PriceForPurchase €
                            </span>
                            <button type="button" class="btn btn-outline-danger btn-sm" id="removeDevice_@item.Name" @onclick="@(()=>RemovePurchaseItem(item))" title="Remove this device">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    }
                    <td colspan="2" class="text-end"><strong>Total:</strong></td>
                    <td><strong>@TotalPrice €</strong></td>
                    <td></td>
                    @*  botón "Purchase"  *@
                    <div class="mt-3">
                        <button type="button" class="btn btn-outline-primary" id="purchaseDeviceButton" hidden="@hidePurchaseDevicesButton" @onclick=@PurchaseDevices>
                            <i class="bi bi-bag-check-fill me-1"></i>Purchase devices
                        </button>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ICollection<DeviceForPurchaseDTO> devices;
    private String deviceName { get; set; }
    private String deviceColor { get; set; }
    private bool hideShoppingCart { get { return purchasestatecontainer.Purchase.PurchaseItems.Count == 0; } }
    private bool hideErrors { get { return error.Length == 0; } }
    private bool HideErrorMessage { get { return devices != null && devices.Count > 0; } }
    private bool hidePurchaseDevicesButton {get{ return purchasestatecontainer.Purchase.PurchaseItems.Count == 0; }}
    private String error = "";
    private double TotalPrice=0; 

    public async void SearchDevices()
    {
        try
        {
            devices = await apiclient.GetDevicesForPurchaseAsync(deviceName, deviceColor, null);
        }
        catch (Exception ex)
        {
            error = "Error: We could not connect to the system, please try it later on!";
            logger.LogError($"{DateTime.Now} Error: error connect to the API. {ex.Message}");
            devices = new List<DeviceForPurchaseDTO>();
        }
        StateHasChanged();
    }

    protected void AddDevice(DeviceForPurchaseDTO device)
    {
        purchasestatecontainer.AddDeviceToPurchase(device);
        TotalPrice = TotalPrice + device.PriceForPurchase;
    }

    protected void RemovePurchaseItem(PurchaseItemDTO purchaseItem)
    {
        purchasestatecontainer.RemovePurchaseItemFromPurchase(purchaseItem);
        TotalPrice -= purchaseItem.PriceForPurchase;
    }

    protected override void OnInitialized()
    {
        SearchDevices();
        base.OnInitialized();
    }

    protected void PurchaseDevices()
    {
        navigationManager.NavigateTo("/purchases/createpurchase");
    }
}
