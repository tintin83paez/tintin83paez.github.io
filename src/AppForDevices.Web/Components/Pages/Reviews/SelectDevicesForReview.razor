@page "/reviews/selectdevicesforreview"
@using AppForDevices.Web.API
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject AppForDevicesAPIClient apiclient
@inject ILogger<SelectDevicesForReview> logger
@inject DeviceForReviewStateContainer DeviceForReviewStateContainer
@attribute [Authorize]
@attribute [StreamRendering]

<h1 class="mb-3">Select Devices for Review</h1>
<p class="text-secondary mb-4">Choose the devices to review and manage your cart below.</p>

<div class="container-fluid">
    <!-- Error Message -->
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger" role="alert" hidden="@hideErrorMessage">
                    <i class="bi bi-exclamation-circle-fill me-2"></i>
                    <p id="ErrorsShown">Errors: @error</p>
                </div>
            </div>
        </div>
    }

    <div class="row">
        <!-- Main Column: Filters and Available Devices -->
        <div class="col-12 col-lg-8">
            <!-- Card: Selected Devices Count -->
            <div class="card mb-3">
                <div class="card-header d-flex align-items-center">
                    <i class="bi bi-check-circle me-2"></i>
                    <strong>Selected Devices</strong>
                    <span class="badge bg-primary ms-auto">@DeviceForReviewStateContainer.Review.ReviewItems.Count</span>
                </div>
            </div>

            <!-- Card: Filter Devices -->
            <div class="card mb-3">
                <div class="card-header d-flex align-items-center">
                    <i class="bi bi-funnel me-2"></i>
                    <strong>Filter Devices</strong>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="filterbyBrand" class="form-label fw-bold">Brand</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-tag-fill"></i></span>
                            <InputText class="form-control" @bind-Value="@deviceBrand" id="filterbyBrand" placeholder="Brand" aria-label="Brand" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="filterbyYear" class="form-label fw-bold">Year</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-calendar"></i></span>
                            <InputNumber class="form-control" @bind-Value="@deviceYear" id="filterbyYear" placeholder="Year" aria-label="Year" />
                        </div>
                    </div>
                    <button type="button" id="searchButton" class="btn btn-primary" @onclick="@SearchDevices">
                        <i class="bi bi-search me-1"></i>Search Devices
                    </button>
                </div>
            </div>

            <!-- Card: Available Devices -->
            <div class="card">
                <div class="card-header d-flex align-items-center">
                    <i class="bi bi-hdd-network me-2"></i>
                    <strong>Devices Available</strong>
                    @if (devices != null && devices.Count > 0)
                    {
                        <span class="badge bg-info text-dark ms-3">@devices.Count found</span>
                    }
                </div>
                <div class="card-body p-0">
                    @if (devices == null)
                    {
                        <div class="p-3">
                            <p class="text-muted mb-0">
                                <i class="bi bi-hourglass-split me-2"></i>Loading devices...
                            </p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover mb-0" id="TableDevices">
                                <thead class="table-light">
                                    <tr>
                                        <th scope="col">Id</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Description</th>
                                        <th scope="col">Color</th>
                                        <th scope="col">Model</th>
                                        <th scope="col">Brand</th>
                                        <th scope="col">Year</th>
                                        <th scope="col">Select</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var device in devices)
                                    {
                                        <tr>
                                            <td>@device.Id</td>
                                            <td>@device.Name</td>
                                            <td>@device.Description</td>
                                            <td>@device.Color</td>
                                            <td>@device.Model</td>
                                            <td>@device.Brand</td>
                                            <td>@device.Year</td>
                                            <td>
                                                <button type="button" id="buttonAddDevice_@device.Id" class="btn btn-outline-primary btn-sm"
                                                        @onclick="() => AddDeviceToReview(device)">
                                                    <i class="bi bi-cart-plus me-1"></i>Add to Cart
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Side Column: Review Cart -->
        @if (!hideShoppingCart)
        {
            <div class="col-12 col-lg-4 mt-3 mt-lg-0">
                <div class="card">
                    <div class="card-header d-flex align-items-center">
                        <i class="bi bi-cart4 me-2"></i>
                        <strong>Review Cart</strong>
                    </div>
                    <div class="card-body">
                        @foreach (var item in DeviceForReviewStateContainer.Review.ReviewItems)
                        {
                            <div class="d-flex align-items-center mb-2 p-2 border-bottom">
                                <span class="flex-grow-1">
                                    <i class="bi bi-device-mobile me-1"></i>Device ID: @item.DeviceId
                                </span>
                                <button type="button" class="btn btn-outline-danger btn-sm" id="buttonRemoveDevice_@item.DeviceId"
                                        @onclick="@(() => RemoveReviewItem(item))" title="Remove this device">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private ICollection<DeviceForLeavingReviewDTO> devices;
    private String? deviceBrand;
    private int? deviceYear;
    private String error = "";
    private bool hideShoppingCart { get { return DeviceForReviewStateContainer.Review.ReviewItems.Count == 0; } }
    private bool hideErrorMessage { get { return devices != null && devices.Count > 0; } }

    public async void SearchDevices()
    {
        try
        {
            devices = await apiclient.GetDevicesForLeavingReviewAsync(deviceBrand, deviceYear, null);
        }
        catch (ApiException ex)
        {
            error = "Error: We could not connect to the system, please try later on!";
            logger.LogError($"{DateTime.Now} Error: error connecting to the API");
            devices = new List<DeviceForLeavingReviewDTO>();
        }
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        SearchDevices();
        base.OnInitialized();
    }

    private void AddDeviceToReview(DeviceForLeavingReviewDTO device)
    {
        if (!DeviceForReviewStateContainer.Review.ReviewItems.Any(r => r.DeviceId == device.Id))
        {
            DeviceForReviewStateContainer.Review.ReviewItems.Add(new ReviewItemDTO
                {
                    DeviceId = device.Id,
                    Comments = "",
                    Rating = 0
                });
        }
        StateHasChanged();
    }

    private void RemoveReviewItem(ReviewItemDTO item)
    {
        DeviceForReviewStateContainer.Review.ReviewItems.Remove(item);
        StateHasChanged();
    }
}
